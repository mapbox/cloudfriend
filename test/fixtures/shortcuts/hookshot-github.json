{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Metadata": {},
  "Parameters": {},
  "Mappings": {},
  "Conditions": {},
  "Resources": {
    "PassSecret": {
      "Type": "AWS::ApiGateway::ApiKey",
      "Properties": {
        "Enabled": false
      }
    },
    "PassApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-webhook"
        },
        "FailOnWarnings": true
      }
    },
    "PassStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "PassDeployment4351c704"
        },
        "StageName": "hookshot",
        "RestApiId": {
          "Ref": "PassApi"
        },
        "MethodSettings": [
          {
            "HttpMethod": "*",
            "ResourcePath": "/*",
            "ThrottlingBurstLimit": 20,
            "ThrottlingRateLimit": 5
          }
        ]
      }
    },
    "PassDeployment4351c704": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": "PassMethod",
      "Properties": {
        "RestApiId": {
          "Ref": "PassApi"
        },
        "StageName": "unused"
      }
    },
    "PassResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "PassApi",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "PassApi"
        },
        "PathPart": "webhook"
      }
    },
    "PassMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "PassApi"
        },
        "ResourceId": {
          "Ref": "PassResource"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "None",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "StatusCode": 200
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "^error.*"
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "^invalid.*"
            }
          ],
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PassFunction.Arn}/invocations"
          },
          "RequestTemplates": {
            "application/json": "{\"signature\":\"$input.params('X-Hub-Signature')\",\"body\":$input.json('$')}"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            }
          },
          {
            "StatusCode": "500",
            "ResponseModels": {
              "application/json": "Empty"
            }
          },
          {
            "StatusCode": "403",
            "ResponseModels": {
              "application/json": "Empty"
            }
          }
        ]
      }
    },
    "PassPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "PassFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PassApi}/*"
        }
      }
    },
    "PassFunctionLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": [
            "/aws/lambda/${name}",
            {
              "name": {
                "Fn::Sub": "${AWS::StackName}-Pass"
              }
            }
          ]
        },
        "RetentionInDays": 14
      }
    },
    "PassFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "sts:AssumeRole",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "main",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "logs:*",
                  "Resource": {
                    "Fn::GetAtt": [
                      "PassFunctionLogs",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": "lambda:InvokeFunction",
                  "Resource": {
                    "Fn::GetAtt": [
                      "Destination",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "PassFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Sub": "'use strict';\n\nconst crypto = require('crypto');\nconst AWS = require('aws-sdk');\nconst lambda = new AWS.Lambda();\nconst secret = '${PassSecret}';\n\nmodule.exports.lambda = (event, context, callback) => {\n  const body = event.body;\n  const hash = 'sha1=' + crypto\n    .createHmac('sha1', secret)\n    .update(new Buffer(JSON.stringify(body)))\n    .digest('hex');\n\n  if (event.signature !== hash)\n    return callback('invalid: signature does not match');\n\n  if (body.zen) return callback(null, 'ignored ping request');\n\n  const lambdaParams = {\n    FunctionName: '${Destination}',\n    Payload: JSON.stringify(event.body),\n    InvocationType: 'Event'\n  };\n\n  lambda.invoke(lambdaParams).promise()\n    .then(() => callback(null, 'success'))\n    .catch((err) => callback(err));\n};"
          }
        },
        "Description": {
          "Fn::Sub": "Passthrough function for ${AWS::StackName}"
        },
        "FunctionName": {
          "Fn::Sub": "${AWS::StackName}-Pass"
        },
        "Handler": "index.lambda",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "PassFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 30
      }
    },
    "PassFunctionErrorAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": {
          "Fn::Sub": "${AWS::StackName}-PassFunction-Errors"
        },
        "AlarmDescription": {
          "Fn::Sub": [
            "Error alarm for ${name} lambda function in ${AWS::StackName} stack",
            {
              "name": {
                "Fn::Sub": "${AWS::StackName}-Pass"
              }
            }
          ]
        },
        "AlarmActions": [],
        "Period": 60,
        "EvaluationPeriods": 1,
        "Statistic": "Sum",
        "Threshold": 0,
        "ComparisonOperator": "GreaterThanThreshold",
        "TreatMissingData": "notBreaching",
        "Namespace": "AWS/Lambda",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "PassFunction"
            }
          }
        ],
        "MetricName": "Errors"
      }
    },
    "DestinationLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": [
            "/aws/lambda/${name}",
            {
              "name": {
                "Fn::Sub": "${AWS::StackName}-Destination"
              }
            }
          ]
        },
        "RetentionInDays": 14
      }
    },
    "DestinationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "sts:AssumeRole",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "main",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "logs:*",
                  "Resource": {
                    "Fn::GetAtt": [
                      "DestinationLogs",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "Destination": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "module.exports.handler = (e, c, cb) => cb();"
        },
        "Description": {
          "Fn::Sub": "Destination in the ${AWS::StackName} stack"
        },
        "FunctionName": {
          "Fn::Sub": "${AWS::StackName}-Destination"
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "DestinationRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 300
      }
    },
    "DestinationErrorAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": {
          "Fn::Sub": "${AWS::StackName}-Destination-Errors"
        },
        "AlarmDescription": {
          "Fn::Sub": [
            "Error alarm for ${name} lambda function in ${AWS::StackName} stack",
            {
              "name": {
                "Fn::Sub": "${AWS::StackName}-Destination"
              }
            }
          ]
        },
        "AlarmActions": [],
        "Period": 60,
        "EvaluationPeriods": 1,
        "Statistic": "Sum",
        "Threshold": 0,
        "ComparisonOperator": "GreaterThanThreshold",
        "TreatMissingData": "notBreaching",
        "Namespace": "AWS/Lambda",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "Destination"
            }
          }
        ],
        "MetricName": "Errors"
      }
    }
  },
  "Outputs": {
    "PassEndpointOutput": {
      "Description": "The HTTPS endpoint used to send github webhooks",
      "Value": {
        "Fn::Sub": "https://${PassApi}.execute-api.${AWS::Region}.amazonaws.com/hookshot/webhook"
      }
    },
    "PassSecretOutput": {
      "Description": "A secret key to give Github to use when signing webhook requests",
      "Value": {
        "Ref": "PassSecret"
      }
    }
  }
}