{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Metadata": {},
  "Parameters": {},
  "Mappings": {},
  "Conditions": {},
  "Resources": {
    "MyLambdaLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": [
            "/aws/lambda/${name}",
            {
              "name": {
                "Fn::Sub": "${AWS::StackName}-MyLambda"
              }
            }
          ]
        },
        "RetentionInDays": 14
      }
    },
    "MyLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "sts:AssumeRole",
              "Principal": {
                "Service": {
                  "Fn::Sub": "lambda.${AWS::URLSuffix}"
                }
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "main",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "logs:*",
                  "Resource": {
                    "Fn::GetAtt": [
                      "MyLambdaLogs",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "MyLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "my-code-bucket",
          "S3Key": "path/to/code.zip"
        },
        "Description": {
          "Fn::Sub": "MyLambda in the ${AWS::StackName} stack"
        },
        "FunctionName": {
          "Fn::Sub": "${AWS::StackName}-MyLambda"
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "MyLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 300
      }
    },
    "MyLambdaErrorAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": {
          "Fn::Sub": "${AWS::StackName}-MyLambda-Errors"
        },
        "AlarmDescription": {
          "Fn::Sub": [
            "Error alarm for ${name} lambda function in ${AWS::StackName} stack",
            {
              "name": {
                "Fn::Sub": "${AWS::StackName}-MyLambda"
              }
            }
          ]
        },
        "AlarmActions": [],
        "Period": 60,
        "EvaluationPeriods": 1,
        "Statistic": "Sum",
        "Threshold": 0,
        "ComparisonOperator": "GreaterThanThreshold",
        "TreatMissingData": "notBreaching",
        "Namespace": "AWS/Lambda",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "MyLambda"
            }
          }
        ],
        "MetricName": "Errors"
      }
    },
    "MyLambdaSchedule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-MyLambda"
        },
        "Description": {
          "Fn::Sub": [
            "Schedule for ${function} in ${AWS::StackName} stack",
            {
              "function": {
                "Fn::Sub": "${AWS::StackName}-MyLambda"
              }
            }
          ]
        },
        "State": "DISABLED",
        "ScheduleExpression": "rate(1 hour)",
        "Targets": [
          {
            "Id": {
              "Fn::Sub": "${AWS::StackName}-MyLambda"
            },
            "Arn": {
              "Fn::GetAtt": [
                "MyLambda",
                "Arn"
              ]
            }
          }
        ]
      }
    },
    "MyLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "MyLambda",
            "Arn"
          ]
        },
        "Principal": {
          "Fn::Sub": "events.${AWS::URLSuffix}"
        },
        "SourceArn": {
          "Fn::GetAtt": [
            "MyLambdaSchedule",
            "Arn"
          ]
        }
      }
    }
  },
  "Outputs": {}
}